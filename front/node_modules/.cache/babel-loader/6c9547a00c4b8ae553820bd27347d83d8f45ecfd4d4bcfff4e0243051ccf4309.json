{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SC22381\\\\Desktop\\\\NEW SGE\\\\SGE - react + spring\\\\front\\\\src\\\\pages\\\\Registro_Causal\\\\Registro.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { list_Causais } from \"../../services/StatusService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hideNextSiblings = () => {\n  const toggleButtons = document.querySelectorAll('.toggle-data-btn');\n  toggleButtons.forEach(toggleButton => {\n    const cardBody = toggleButton.parentNode.nextElementSibling;\n    cardBody.style.display = 'none';\n  });\n};\nconst renderData = data => {\n  // Função renderData permanece sem alterações\n};\n\n// const App = () => {\n//     const [data, setData] = useState([]);\n//\n//     // useEffect(() => {\n//     //     const fetchDataAndRender = async () => {\n//     //         const fetchedData = await list_Causais();\n//     //         setData(fetchedData);\n//     //         hideNextSiblings();\n//     //     };\n//     //\n//     //     fetchDataAndRender();\n//     // }, []); // O array vazio [] como segundo argumento garante que o useEffect é chamado apenas uma vez após a montagem do componente.\n//\n//     useEffect(() => {\n//         list_Causais().then((response) => {\n//             setData(response.data);\n//         }).catch(error => {\n//             console.log(error);\n//         })\n//     }, [data])\n//\n//     const handleToggleButtonClick = (event) => {\n//         if (event.target.matches('.toggle-data-btn')) {\n//             const cardBody = event.target.parentNode.nextElementSibling;\n//             const toggleBtnText = event.target.textContent;\n//\n//             if (toggleBtnText === '+') {\n//                 event.target.textContent = '-';\n//                 cardBody.style.display = 'block';\n//             } else {\n//                 event.target.textContent = '+';\n//                 cardBody.style.display = 'none';\n//             }\n//         }\n//     };\n//\n//     return (\n//         <div id=\"data-container\">\n//             {data.map((typeData,index) => (\n//                 <div key={index} className=\"col-md-3\">\n//                     <div className=\"card mb-3\">\n//                         <div className=\"card-body\">\n//                             <h5 className=\"card-title\">\n//                                 {typeData.type}\n//                                 <button\n//                                     className=\"btn btn-primary btn-sm toggle-data-btn\"\n//                                     onClick={handleToggleButtonClick}\n//                                 >\n//                                     +\n//                                 </button>\n//                             </h5>\n//                             <ul>\n//                                 {/*{typeData.items.map((item, itemIndex) => (*/}\n//                                 {/*    <li key={itemIndex}>*/}\n//                                 {/*        <input*/}\n//                                 {/*            type=\"checkbox\"*/}\n//                                 {/*            value={item.causal}*/}\n//                                 {/*            onChange={() => {*/}\n//                                 {/*                // Sua lógica de manipulação do estado aqui*/}\n//                                 {/*            }}*/}\n//                                 {/*        />*/}\n//                                 {/*        <span>{` ${item.Code} ${item.causal} `}</span>*/}\n//                                 {/*        /!* Restante do seu código de renderização *!/*/}\n//                                 {/*    </li>*/}\n//                                 {/*))}*/}\n//                                 <li key={index}>\n//                                     <input\n//                                         type=\"checkbox\"\n//                                         value={typeData.causal}\n//                                         onChange={() => {\n//                                             // Sua lógica de manipulação do estado aqui\n//                                         }}\n//                                     />\n//                                     <span>{` ${typeData.Code} ${typeData.causal} `}</span>\n//                                     {/* Restante do seu código de renderização */}\n//                                 </li>\n//                             </ul>\n//                         </div>\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// ... (código anterior)\n\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    list_Causais().then(response => {\n      setData(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [data]);\n  const handleToggleButtonClick = event => {\n    if (event.target.matches('.toggle-data-btn')) {\n      const cardBody = event.target.parentNode.nextElementSibling;\n      const toggleBtnText = event.target.textContent;\n      if (toggleBtnText === '+') {\n        event.target.textContent = '-';\n        cardBody.style.display = 'block';\n      } else {\n        event.target.textContent = '+';\n        cardBody.style.display = 'none';\n      }\n    }\n  };\n\n  // Group data by type\n  const groupedData = useMemo(() => {\n    return data.reduce((groups, item) => {\n      const existingGroup = groups.find(g => g.type === item.type);\n      if (existingGroup) {\n        existingGroup.items.push(item);\n      } else {\n        groups.push({\n          type: item.type,\n          items: [item]\n        });\n      }\n      return groups;\n    }, []);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"data-container\",\n    children: groupedData.map((groupData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title\",\n            children: [groupData.Type, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-sm toggle-data-btn\",\n              onClick: handleToggleButtonClick,\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              display: 'none'\n            },\n            children: groupData.items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: groupData.causal,\n                onChange: () => {\n                  // Sua lógica de manipulação do estado aqui\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: ` ${groupData.Code} ${groupData.causal} `\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"EIYfM949pFkcC4dM8WE675qewnk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","list_Causais","jsxDEV","_jsxDEV","hideNextSiblings","toggleButtons","document","querySelectorAll","forEach","toggleButton","cardBody","parentNode","nextElementSibling","style","display","renderData","data","App","_s","setData","then","response","catch","error","console","log","handleToggleButtonClick","event","target","matches","toggleBtnText","textContent","groupedData","reduce","groups","item","existingGroup","find","g","type","items","push","id","children","map","groupData","index","className","Type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","itemIndex","value","causal","onChange","Code","_c","$RefreshReg$"],"sources":["C:/Users/SC22381/Desktop/NEW SGE/SGE - react + spring/front/src/pages/Registro_Causal/Registro.js"],"sourcesContent":["import React, {useState, useEffect, useMemo} from 'react';\r\nimport {list_Causais} from \"../../services/StatusService\";\r\n\r\n\r\n\r\nconst hideNextSiblings = () => {\r\n    const toggleButtons = document.querySelectorAll('.toggle-data-btn');\r\n\r\n    toggleButtons.forEach((toggleButton) => {\r\n        const cardBody = toggleButton.parentNode.nextElementSibling;\r\n        cardBody.style.display = 'none';\r\n    });\r\n};\r\n\r\nconst renderData = (data) => {\r\n    // Função renderData permanece sem alterações\r\n};\r\n\r\n// const App = () => {\r\n//     const [data, setData] = useState([]);\r\n//\r\n//     // useEffect(() => {\r\n//     //     const fetchDataAndRender = async () => {\r\n//     //         const fetchedData = await list_Causais();\r\n//     //         setData(fetchedData);\r\n//     //         hideNextSiblings();\r\n//     //     };\r\n//     //\r\n//     //     fetchDataAndRender();\r\n//     // }, []); // O array vazio [] como segundo argumento garante que o useEffect é chamado apenas uma vez após a montagem do componente.\r\n//\r\n//     useEffect(() => {\r\n//         list_Causais().then((response) => {\r\n//             setData(response.data);\r\n//         }).catch(error => {\r\n//             console.log(error);\r\n//         })\r\n//     }, [data])\r\n//\r\n//     const handleToggleButtonClick = (event) => {\r\n//         if (event.target.matches('.toggle-data-btn')) {\r\n//             const cardBody = event.target.parentNode.nextElementSibling;\r\n//             const toggleBtnText = event.target.textContent;\r\n//\r\n//             if (toggleBtnText === '+') {\r\n//                 event.target.textContent = '-';\r\n//                 cardBody.style.display = 'block';\r\n//             } else {\r\n//                 event.target.textContent = '+';\r\n//                 cardBody.style.display = 'none';\r\n//             }\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <div id=\"data-container\">\r\n//             {data.map((typeData,index) => (\r\n//                 <div key={index} className=\"col-md-3\">\r\n//                     <div className=\"card mb-3\">\r\n//                         <div className=\"card-body\">\r\n//                             <h5 className=\"card-title\">\r\n//                                 {typeData.type}\r\n//                                 <button\r\n//                                     className=\"btn btn-primary btn-sm toggle-data-btn\"\r\n//                                     onClick={handleToggleButtonClick}\r\n//                                 >\r\n//                                     +\r\n//                                 </button>\r\n//                             </h5>\r\n//                             <ul>\r\n//                                 {/*{typeData.items.map((item, itemIndex) => (*/}\r\n//                                 {/*    <li key={itemIndex}>*/}\r\n//                                 {/*        <input*/}\r\n//                                 {/*            type=\"checkbox\"*/}\r\n//                                 {/*            value={item.causal}*/}\r\n//                                 {/*            onChange={() => {*/}\r\n//                                 {/*                // Sua lógica de manipulação do estado aqui*/}\r\n//                                 {/*            }}*/}\r\n//                                 {/*        />*/}\r\n//                                 {/*        <span>{` ${item.Code} ${item.causal} `}</span>*/}\r\n//                                 {/*        /!* Restante do seu código de renderização *!/*/}\r\n//                                 {/*    </li>*/}\r\n//                                 {/*))}*/}\r\n//                                 <li key={index}>\r\n//                                     <input\r\n//                                         type=\"checkbox\"\r\n//                                         value={typeData.causal}\r\n//                                         onChange={() => {\r\n//                                             // Sua lógica de manipulação do estado aqui\r\n//                                         }}\r\n//                                     />\r\n//                                     <span>{` ${typeData.Code} ${typeData.causal} `}</span>\r\n//                                     {/* Restante do seu código de renderização */}\r\n//                                 </li>\r\n//                             </ul>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// ... (código anterior)\r\n\r\nconst App = () => {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        list_Causais().then((response) => {\r\n            setData(response.data);\r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [data])\r\n\r\n    const handleToggleButtonClick = (event) => {\r\n        if (event.target.matches('.toggle-data-btn')) {\r\n            const cardBody = event.target.parentNode.nextElementSibling;\r\n            const toggleBtnText = event.target.textContent;\r\n\r\n            if (toggleBtnText === '+') {\r\n                event.target.textContent = '-';\r\n                cardBody.style.display = 'block';\r\n            } else {\r\n                event.target.textContent = '+';\r\n                cardBody.style.display = 'none';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Group data by type\r\n    const groupedData = useMemo(() => {\r\n        return data.reduce((groups, item) => {\r\n            const existingGroup = groups.find(g => g.type === item.type);\r\n            if (existingGroup) {\r\n                existingGroup.items.push(item);\r\n            } else {\r\n                groups.push({ type: item.type, items: [item] });\r\n            }\r\n            return groups;\r\n        }, []);\r\n    }, [data]);\r\n\r\n    return (\r\n        <div id=\"data-container\">\r\n            {groupedData.map((groupData, index) => (\r\n                <div key={index} className=\"col-md-3\">\r\n                    <div className=\"card mb-3\">\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">\r\n                                {groupData.Type}\r\n                                <button\r\n                                    className=\"btn btn-primary btn-sm toggle-data-btn\"\r\n                                    onClick={handleToggleButtonClick}\r\n                                >\r\n                                    +\r\n                                </button>\r\n                            </h5>\r\n                            <ul style={{ display: 'none' }}>\r\n\r\n                                {groupData.items.map((item, itemIndex) => (\r\n                                    <li key={index}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value={groupData.causal}\r\n                                            onChange={() => {\r\n                                                // Sua lógica de manipulação do estado aqui\r\n                                            }}\r\n                                        />\r\n                                        <span>{` ${groupData.Code} ${groupData.causal} `}</span>\r\n                                        {/* Restante do seu código de renderização */}\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}