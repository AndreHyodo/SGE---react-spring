{"ast":null,"code":"import React,{useState,useEffect,useMemo}from'react';import{list_Causais}from\"../../services/StatusService\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const hideNextSiblings=()=>{const toggleButtons=document.querySelectorAll('.toggle-data-btn');toggleButtons.forEach(toggleButton=>{const cardBody=toggleButton.parentNode.nextElementSibling;cardBody.style.display='none';});};const renderData=data=>{// Função renderData permanece sem alterações\n};// const App = () => {\n//     const [data, setData] = useState([]);\n//\n//     // useEffect(() => {\n//     //     const fetchDataAndRender = async () => {\n//     //         const fetchedData = await list_Causais();\n//     //         setData(fetchedData);\n//     //         hideNextSiblings();\n//     //     };\n//     //\n//     //     fetchDataAndRender();\n//     // }, []); // O array vazio [] como segundo argumento garante que o useEffect é chamado apenas uma vez após a montagem do componente.\n//\n//     useEffect(() => {\n//         list_Causais().then((response) => {\n//             setData(response.data);\n//         }).catch(error => {\n//             console.log(error);\n//         })\n//     }, [data])\n//\n//     const handleToggleButtonClick = (event) => {\n//         if (event.target.matches('.toggle-data-btn')) {\n//             const cardBody = event.target.parentNode.nextElementSibling;\n//             const toggleBtnText = event.target.textContent;\n//\n//             if (toggleBtnText === '+') {\n//                 event.target.textContent = '-';\n//                 cardBody.style.display = 'block';\n//             } else {\n//                 event.target.textContent = '+';\n//                 cardBody.style.display = 'none';\n//             }\n//         }\n//     };\n//\n//     return (\n//         <div id=\"data-container\">\n//             {data.map((typeData,index) => (\n//                 <div key={index} className=\"col-md-3\">\n//                     <div className=\"card mb-3\">\n//                         <div className=\"card-body\">\n//                             <h5 className=\"card-title\">\n//                                 {typeData.type}\n//                                 <button\n//                                     className=\"btn btn-primary btn-sm toggle-data-btn\"\n//                                     onClick={handleToggleButtonClick}\n//                                 >\n//                                     +\n//                                 </button>\n//                             </h5>\n//                             <ul>\n//                                 {/*{typeData.items.map((item, itemIndex) => (*/}\n//                                 {/*    <li key={itemIndex}>*/}\n//                                 {/*        <input*/}\n//                                 {/*            type=\"checkbox\"*/}\n//                                 {/*            value={item.causal}*/}\n//                                 {/*            onChange={() => {*/}\n//                                 {/*                // Sua lógica de manipulação do estado aqui*/}\n//                                 {/*            }}*/}\n//                                 {/*        />*/}\n//                                 {/*        <span>{` ${item.Code} ${item.causal} `}</span>*/}\n//                                 {/*        /!* Restante do seu código de renderização *!/*/}\n//                                 {/*    </li>*/}\n//                                 {/*))}*/}\n//                                 <li key={index}>\n//                                     <input\n//                                         type=\"checkbox\"\n//                                         value={typeData.causal}\n//                                         onChange={() => {\n//                                             // Sua lógica de manipulação do estado aqui\n//                                         }}\n//                                     />\n//                                     <span>{` ${typeData.Code} ${typeData.causal} `}</span>\n//                                     {/* Restante do seu código de renderização */}\n//                                 </li>\n//                             </ul>\n//                         </div>\n//                     </div>\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n// ... (código anterior)\nconst App=()=>{const[data,setData]=useState([]);useEffect(()=>{list_Causais().then(response=>{setData(response.data);}).catch(error=>{console.log(error);});},[data]);const handleToggleButtonClick=event=>{if(event.target.matches('.toggle-data-btn')){const cardBody=event.target.parentNode.nextElementSibling;const toggleBtnText=event.target.textContent;if(toggleBtnText==='+'){event.target.textContent='-';cardBody.style.display='block';}else{event.target.textContent='+';cardBody.style.display='none';}}};// Group data by type\nconst groupedData=useMemo(()=>{return data.reduce((groups,item)=>{const existingGroup=groups.find(g=>g.type===item.type);if(existingGroup){existingGroup.items.push(item);}else{groups.push({type:item.type,items:[item]});}return groups;},[]);},[data]);return/*#__PURE__*/_jsx(\"div\",{id:\"data-container\",children:groupedData.map((groupData,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\",children:/*#__PURE__*/_jsx(\"div\",{className:\"card mb-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-body\",children:[/*#__PURE__*/_jsxs(\"h5\",{className:\"card-title\",children:[groupData.Type,/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary btn-sm toggle-data-btn\",onClick:handleToggleButtonClick,children:\"+\"})]}),/*#__PURE__*/_jsx(\"ul\",{style:{display:'none'},children:groupData.items.map((item,itemIndex)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:groupData.causal,onChange:()=>{// Sua lógica de manipulação do estado aqui\n}}),/*#__PURE__*/_jsx(\"span\",{children:\" \".concat(groupData.Code,\" \").concat(groupData.causal,\" \")})]},index))})]})})},index))});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useMemo","list_Causais","jsx","_jsx","jsxs","_jsxs","hideNextSiblings","toggleButtons","document","querySelectorAll","forEach","toggleButton","cardBody","parentNode","nextElementSibling","style","display","renderData","data","App","setData","then","response","catch","error","console","log","handleToggleButtonClick","event","target","matches","toggleBtnText","textContent","groupedData","reduce","groups","item","existingGroup","find","g","type","items","push","id","children","map","groupData","index","className","Type","onClick","itemIndex","value","causal","onChange","concat","Code"],"sources":["C:/Users/SC22381/Desktop/NEW SGE/SGE - react + spring/front/src/pages/Registro_Causal/Registro.js"],"sourcesContent":["import React, {useState, useEffect, useMemo} from 'react';\r\nimport {list_Causais} from \"../../services/StatusService\";\r\n\r\n\r\n\r\nconst hideNextSiblings = () => {\r\n    const toggleButtons = document.querySelectorAll('.toggle-data-btn');\r\n\r\n    toggleButtons.forEach((toggleButton) => {\r\n        const cardBody = toggleButton.parentNode.nextElementSibling;\r\n        cardBody.style.display = 'none';\r\n    });\r\n};\r\n\r\nconst renderData = (data) => {\r\n    // Função renderData permanece sem alterações\r\n};\r\n\r\n// const App = () => {\r\n//     const [data, setData] = useState([]);\r\n//\r\n//     // useEffect(() => {\r\n//     //     const fetchDataAndRender = async () => {\r\n//     //         const fetchedData = await list_Causais();\r\n//     //         setData(fetchedData);\r\n//     //         hideNextSiblings();\r\n//     //     };\r\n//     //\r\n//     //     fetchDataAndRender();\r\n//     // }, []); // O array vazio [] como segundo argumento garante que o useEffect é chamado apenas uma vez após a montagem do componente.\r\n//\r\n//     useEffect(() => {\r\n//         list_Causais().then((response) => {\r\n//             setData(response.data);\r\n//         }).catch(error => {\r\n//             console.log(error);\r\n//         })\r\n//     }, [data])\r\n//\r\n//     const handleToggleButtonClick = (event) => {\r\n//         if (event.target.matches('.toggle-data-btn')) {\r\n//             const cardBody = event.target.parentNode.nextElementSibling;\r\n//             const toggleBtnText = event.target.textContent;\r\n//\r\n//             if (toggleBtnText === '+') {\r\n//                 event.target.textContent = '-';\r\n//                 cardBody.style.display = 'block';\r\n//             } else {\r\n//                 event.target.textContent = '+';\r\n//                 cardBody.style.display = 'none';\r\n//             }\r\n//         }\r\n//     };\r\n//\r\n//     return (\r\n//         <div id=\"data-container\">\r\n//             {data.map((typeData,index) => (\r\n//                 <div key={index} className=\"col-md-3\">\r\n//                     <div className=\"card mb-3\">\r\n//                         <div className=\"card-body\">\r\n//                             <h5 className=\"card-title\">\r\n//                                 {typeData.type}\r\n//                                 <button\r\n//                                     className=\"btn btn-primary btn-sm toggle-data-btn\"\r\n//                                     onClick={handleToggleButtonClick}\r\n//                                 >\r\n//                                     +\r\n//                                 </button>\r\n//                             </h5>\r\n//                             <ul>\r\n//                                 {/*{typeData.items.map((item, itemIndex) => (*/}\r\n//                                 {/*    <li key={itemIndex}>*/}\r\n//                                 {/*        <input*/}\r\n//                                 {/*            type=\"checkbox\"*/}\r\n//                                 {/*            value={item.causal}*/}\r\n//                                 {/*            onChange={() => {*/}\r\n//                                 {/*                // Sua lógica de manipulação do estado aqui*/}\r\n//                                 {/*            }}*/}\r\n//                                 {/*        />*/}\r\n//                                 {/*        <span>{` ${item.Code} ${item.causal} `}</span>*/}\r\n//                                 {/*        /!* Restante do seu código de renderização *!/*/}\r\n//                                 {/*    </li>*/}\r\n//                                 {/*))}*/}\r\n//                                 <li key={index}>\r\n//                                     <input\r\n//                                         type=\"checkbox\"\r\n//                                         value={typeData.causal}\r\n//                                         onChange={() => {\r\n//                                             // Sua lógica de manipulação do estado aqui\r\n//                                         }}\r\n//                                     />\r\n//                                     <span>{` ${typeData.Code} ${typeData.causal} `}</span>\r\n//                                     {/* Restante do seu código de renderização */}\r\n//                                 </li>\r\n//                             </ul>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// ... (código anterior)\r\n\r\nconst App = () => {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        list_Causais().then((response) => {\r\n            setData(response.data);\r\n        }).catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [data])\r\n\r\n    const handleToggleButtonClick = (event) => {\r\n        if (event.target.matches('.toggle-data-btn')) {\r\n            const cardBody = event.target.parentNode.nextElementSibling;\r\n            const toggleBtnText = event.target.textContent;\r\n\r\n            if (toggleBtnText === '+') {\r\n                event.target.textContent = '-';\r\n                cardBody.style.display = 'block';\r\n            } else {\r\n                event.target.textContent = '+';\r\n                cardBody.style.display = 'none';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Group data by type\r\n    const groupedData = useMemo(() => {\r\n        return data.reduce((groups, item) => {\r\n            const existingGroup = groups.find(g => g.type === item.type);\r\n            if (existingGroup) {\r\n                existingGroup.items.push(item);\r\n            } else {\r\n                groups.push({ type: item.type, items: [item] });\r\n            }\r\n            return groups;\r\n        }, []);\r\n    }, [data]);\r\n\r\n    return (\r\n        <div id=\"data-container\">\r\n            {groupedData.map((groupData, index) => (\r\n                <div key={index} className=\"col-md-3\">\r\n                    <div className=\"card mb-3\">\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">\r\n                                {groupData.Type}\r\n                                <button\r\n                                    className=\"btn btn-primary btn-sm toggle-data-btn\"\r\n                                    onClick={handleToggleButtonClick}\r\n                                >\r\n                                    +\r\n                                </button>\r\n                            </h5>\r\n                            <ul style={{ display: 'none' }}>\r\n\r\n                                {groupData.items.map((item, itemIndex) => (\r\n                                    <li key={index}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value={groupData.causal}\r\n                                            onChange={() => {\r\n                                                // Sua lógica de manipulação do estado aqui\r\n                                            }}\r\n                                        />\r\n                                        <span>{` ${groupData.Code} ${groupData.causal} `}</span>\r\n                                        {/* Restante do seu código de renderização */}\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}